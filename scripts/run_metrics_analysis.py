import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

def run_metrics_analysis(data):
    """
    Executa an√°lise de m√©tricas b√°sicas:
    - Receita por Sess√£o (RPS)
    - Receita Total por Variante
    - Sess√µes Totais por Variante
    - Convers√£o impl√≠cita (se receita > 0 for convers√£o)
    - Sample Ratio Mismatch (SRM)
    """
    # Configura√ß√£o de estilo para os gr√°ficos
    plt.style.use('seaborn-v0_8-whitegrid')
    
    # Verificar se os dados cont√™m as colunas necess√°rias
    required_columns = ['data', 'variante', 'receita', 'sessoes']
    if not all(col in data.columns for col in required_columns):
        st.error("Dados n√£o cont√™m todas as colunas necess√°rias: data, variante, receita, sessoes")
        return
    
    # Calcular Sample Ratio Mismatch (SRM)
    st.subheader("üîÑ Sample Ratio Mismatch (SRM)")
    
    # Contagem de sess√µes por variante
    variant_counts = data.groupby('variante')['sessoes'].sum()
    
    # Verificar se temos exatamente duas variantes
    if len(variant_counts) == 2:
        variants = variant_counts.index.tolist()
        expected_ratio = 0.5  # Esperamos uma divis√£o 50/50 entre controle e variante
        
        # Calcular propor√ß√£o observada
        total_sessions = variant_counts.sum()
        observed_ratio = variant_counts[variants[1]] / total_sessions
        
        # Calcular p-valor para o teste binomial
        from scipy import stats
        try:
            # Para vers√µes mais recentes do SciPy
            p_value = stats.binomtest(
                k=int(variant_counts[variants[1]]), 
                n=int(total_sessions), 
                p=expected_ratio
            ).pvalue
        except AttributeError:
            # Fallback para vers√µes mais antigas do SciPy
            p_value = stats.binom_test(
                int(variant_counts[variants[1]]), 
                n=int(total_sessions), 
                p=expected_ratio
            )
        
        # Exibir resultados
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("Propor√ß√£o Esperada", f"{expected_ratio:.1%}")
            st.metric("Propor√ß√£o Observada", f"{observed_ratio:.1%}")
            st.metric("Diferen√ßa", f"{(observed_ratio - expected_ratio) * 100:.2f}pp")
        
        with col2:
            st.metric("P-valor", f"{p_value:.4f}")
            
            # Interpreta√ß√£o do SRM
            if p_value < 0.05:
                st.error("‚ö†Ô∏è **SRM Detectado!** A distribui√ß√£o de tr√°fego entre as variantes n√£o √© aleat√≥ria (p < 0.05).")
                st.warning("Os resultados do teste podem estar comprometidos devido √† aloca√ß√£o desigual de tr√°fego.")
            else:
                st.success("‚úÖ **SRM N√£o Detectado.** A distribui√ß√£o de tr√°fego entre as variantes parece aleat√≥ria (p ‚â• 0.05).")
                st.info("A aloca√ß√£o de tr√°fego est√° dentro do esperado para um teste A/B v√°lido.")
    else:
        st.warning("O c√°lculo de SRM requer exatamente duas variantes (Controle e Variante).")
    
    st.markdown("---")
    
    # Calcular m√©tricas por variante
    metrics = data.groupby('variante').agg(
        receita_total=('receita', 'sum'),
        sessoes_total=('sessoes', 'sum')
    ).reset_index()
    
    # Calcular RPS (Receita por Sess√£o)
    metrics['rps'] = metrics['receita_total'] / metrics['sessoes_total']
    
    # Calcular convers√£o impl√≠cita (se receita > 0)
    conversao = data.copy()
    conversao['converteu'] = (conversao['receita'] > 0).astype(int)
    conv_metrics = conversao.groupby('variante').agg(
        conversoes=('converteu', 'sum'),
        sessoes_total=('sessoes', 'sum')
    ).reset_index()
    conv_metrics['taxa_conversao'] = (conv_metrics['conversoes'] / conv_metrics['sessoes_total']) * 100
    
    # Exibir m√©tricas em tabelas
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä M√©tricas Gerais")
        st.dataframe(metrics)
        
        # Calcular diferen√ßa percentual entre variantes
        if len(metrics) == 2:
            control = metrics[metrics['variante'] == 'Controle']
            variant = metrics[metrics['variante'] != 'Controle']
            
            if not control.empty and not variant.empty:
                rps_diff = ((variant['rps'].values[0] / control['rps'].values[0]) - 1) * 100
                receita_diff = ((variant['receita_total'].values[0] / control['receita_total'].values[0]) - 1) * 100
                sessoes_diff = ((variant['sessoes_total'].values[0] / control['sessoes_total'].values[0]) - 1) * 100
                
                st.info(f"Diferen√ßa na RPS: {rps_diff:.2f}%")
                st.info(f"Diferen√ßa na Receita Total: {receita_diff:.2f}%")
                st.info(f"Diferen√ßa nas Sess√µes: {sessoes_diff:.2f}%")
    
    with col2:
        st.subheader("üîÑ Taxas de Convers√£o")
        st.dataframe(conv_metrics[['variante', 'conversoes', 'taxa_conversao']])
        
        # Calcular diferen√ßa percentual na convers√£o
        if len(conv_metrics) == 2:
            control = conv_metrics[conv_metrics['variante'] == 'Controle']
            variant = conv_metrics[conv_metrics['variante'] != 'Controle']
            
            if not control.empty and not variant.empty:
                conv_diff = ((variant['taxa_conversao'].values[0] / control['taxa_conversao'].values[0]) - 1) * 100
                st.info(f"Diferen√ßa na Taxa de Convers√£o: {conv_diff:.2f}%")
    
    # Visualiza√ß√µes
    st.subheader("üìà Visualiza√ß√µes")
    
    # Gr√°fico de barras para RPS
    fig1, ax1 = plt.subplots(figsize=(10, 6))
    sns.barplot(x='variante', y='rps', data=metrics, palette=['#1E88E5', '#00e13a'], ax=ax1)
    ax1.set_title('Receita por Sess√£o (RPS) por Variante')
    ax1.set_ylabel('RPS')
    ax1.set_xlabel('Variante')
    st.pyplot(fig1)
    
    # Gr√°fico de barras para taxa de convers√£o
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    sns.barplot(x='variante', y='taxa_conversao', data=conv_metrics, palette=['#1E88E5', '#00e13a'], ax=ax2)
    ax2.set_title('Taxa de Convers√£o por Variante (%)')
    ax2.set_ylabel('Taxa de Convers√£o (%)')
    ax2.set_xlabel('Variante')
    st.pyplot(fig2)
    
    # An√°lise di√°ria
    st.subheader("üìÖ An√°lise Di√°ria")
    
    # Calcular m√©tricas di√°rias
    daily_metrics = data.groupby(['data', 'variante']).agg(
        receita_diaria=('receita', 'sum'),
        sessoes_diarias=('sessoes', 'sum')
    ).reset_index()
    daily_metrics['rps_diario'] = daily_metrics['receita_diaria'] / daily_metrics['sessoes_diarias']
    
    # Gr√°fico de linha para RPS di√°rio
    fig5, ax5 = plt.subplots(figsize=(12, 6))
    for variante, grupo in daily_metrics.groupby('variante'):
        ax5.plot(grupo['data'], grupo['rps_diario'], marker='o', label=variante)
    ax5.set_title('Evolu√ß√£o Di√°ria da RPS por Variante')
    ax5.set_ylabel('RPS')
    ax5.set_xlabel('Data')
    ax5.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig5)
    
    # Conclus√£o
    st.subheader("üîç Conclus√£o")
    
    if len(metrics) == 2:
        control = metrics[metrics['variante'] == 'Controle']
        variant = metrics[metrics['variante'] != 'Controle']
        
        if not control.empty and not variant.empty:
            if rps_diff > 0:
                st.success(f"‚úÖ A variante apresenta uma RPS {rps_diff:.2f}% maior que o controle.")
            else:
                st.error(f"‚ùå A variante apresenta uma RPS {abs(rps_diff):.2f}% menor que o controle.")
            
            if conv_diff > 0:
                st.success(f"‚úÖ A taxa de convers√£o da variante √© {conv_diff:.2f}% maior que o controle.")
            else:
                st.error(f"‚ùå A taxa de convers√£o da variante √© {abs(conv_diff):.2f}% menor que o controle.")


